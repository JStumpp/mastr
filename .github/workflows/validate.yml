name: Validate export
on:
  schedule:
  - cron: '0 4 * * MON-FRI' # Every weekday at 04:00
  workflow_dispatch:        # Enable manual trigger
env:
  SRHT_SITE_OAUTH2_TOKEN: ${{secrets.SRHT_SITE_OAUTH2_TOKEN}}
  RCLONE_CONFIG_WASABI_ACCESS_KEY_ID: ${{secrets.RCLONE_CONFIG_WASABI_ACCESS_KEY_ID}}
  RCLONE_CONFIG_WASABI_SECRET_ACCESS_KEY: ${{secrets.RCLONE_CONFIG_WASABI_SECRET_ACCESS_KEY}}
  FLY_API_TOKEN: ${{secrets.FLY_API_TOKEN}}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:

    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.x

    - name: Check out code
      uses: actions/checkout@v2

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install packages
      run: |
        set -Eeuxo pipefail

        sudo apt-get update
        sudo apt-get install axel brotli jq rclone

        # ruby-mustache does not handle zero as an empty value for the purpose of {#IntValue}...{/IntValue} blocks.
        curl -sSLo mustache.tar.gz https://github.com/cbroglie/mustache/releases/download/v1.3.1/mustache_1.3.1_linux_amd64.tar.gz
        tar -xvzf mustache.tar.gz mustache
        sudo mv mustache /usr/bin/mustache
        rm mustache.tar.gz

        # superfly/flyctl-actions is broken [1], so install flyctl directly instead.
        # [1] https://github.com/superfly/flyctl-actions/issues/16
        curl -sSLo flyctl.tar.gz https://github.com/superfly/flyctl/releases/download/v0.0.295/flyctl_0.0.295_Linux_x86_64.tar.gz
        tar -xvzf flyctl.tar.gz
        sudo mv flyctl /usr/bin/flyctl
        rm flyctl.tar.gz

        jq --version
        rclone --version
        flyctl version

    - name: Validate and upload
      run: |
        set -Eeuxo pipefail

        go build -o validate ./cmd/validate/main.go

        EXPORT_URL="$(curl -sSL https://www.marktstammdatenregister.de/MaStR/Datendownload |
          sed -E 's|^.*(https://download.marktstammdatenregister.de/Gesamtdatenexport_.*\.zip).*$|\1|gp;d')"
        EXPORT_FILENAME="${EXPORT_URL##*/}"

        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
        echo "EXPORT_FILENAME=${EXPORT_FILENAME}" >> "${GITHUB_ENV}"

        SHORT_FILENAME="$(echo "${EXPORT_FILENAME}" | sed -E 's|^(Gesamtdatenexport_.+)_.*_.*.*\.zip$|\1|gp;d')"

        axel --quiet --output="${EXPORT_FILENAME}" "${EXPORT_URL}"
        ./validate -export "${EXPORT_FILENAME}" -spec spec/Gesamtdatenexport.yaml -format json >"${SHORT_FILENAME}.json"

        rclone copy --include "${SHORT_FILENAME}.json" . 'wasabi:mastr-validation-1' --config rclone.conf
        curl -sS --header 'x-random;' --upload-file "${SHORT_FILENAME}.json" https://paste.c-net.org/

    - name: Update site
      run: |
        set -Eeuxo pipefail

        mkdir _site && cd _site

        rclone copy --include 'Gesamtdatenexport_*.json' 'wasabi:mastr-validation-1' . --config ../build/rclone.conf

        for f in Gesamtdatenexport_*.json; do
          BASE="${f%.json}"
          mustache "${BASE}.json" ../template/Report.de.html.mustache >"${BASE}.html"
        done

        ls *.html | sort --reverse | jq --raw-input . | jq --slurp '{Reports: . | map({ExportName: (.[:-5]), FileName: .})}' >index.json
        mustache index.json ../template/Index.de.html.mustache >index.html

        curl https://unpkg.com/@picocss/pico@1.4.4/css/pico.min.css >pico.min.css
        tar -cvz *.html pico.min.css >site.tar.gz
        curl --oauth2-bearer "${SRHT_SITE_OAUTH2_TOKEN}" -Fcontent=@site.tar.gz https://pages.sr.ht/publish/curiousleo.srht.site

    - name: Export to SQLite
      run: |
        go build -o import ./cmd/import/main.go
        ./import -export "${{env.EXPORT_FILENAME}}" -spec spec/Gesamtdatenexport.yaml -database build/Marktstammdatenregister.db
        brotli --rm -4 --output=build/Marktstammdatenregister.db.br build/Marktstammdatenregister.db

    # TODO: Use this action once https://github.com/superfly/flyctl-actions/issues/16 has been resolved.
    #- name: Deploy
    #  uses: superfly/flyctl-actions@1.0
    #  with:
    #    args: deploy . --config build/fly.toml --dockerfile build/Dockerfile

    - name: Deploy with flyctl
      run: flyctl deploy . --config build/fly.toml --dockerfile build/Dockerfile
